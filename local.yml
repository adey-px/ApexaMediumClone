version: "3.9"

services:
    esearch:
        image: elasticsearch:7.17.9
        environment:
            - discovery.type=single-node
        ports:
            - "9200:9200"
        networks:
            - codera
    server:
        build:
            context: .
            dockerfile: ./docker/development/django/Dockerfile
        command: /start
        volumes:
            - .:/app:z
            - static_volume:/app/staticfiles
            - media_volume:/app/mediafiles
        expose:
            - "8000"
        env_file:
            - ./env/.development/.django
            - ./env/.development/.postgres
        depends_on:
            - postgres
            - mailhog
            - redis
            - es
        networks:
            - codera

    postgres:
        build:
            context: .
            dockerfile: ./docker/development/postgres/Dockerfile
        volumes:
            - local_postgres_data:/var/lib/postgresql/data
            - local_postgres_data_backups:/backups
        env_file:
            - ./.envs/.development/.postgres
        networks:
            - codera

    mailhog:
        image: mailhog/mailhog:v1.0.0
        container_name: mailhog
        ports:
            - "8025:8025"
        networks:
            - codera

    redis:
        image: redis:7-alpine
        networks:
            - codera

    celery:
        build:
            context: .
            dockerfile: ./docker/development/django/Dockerfile
        command: /start-celeryworker
        volumes:
            - .:/app
        env_file:
            - ./env/.development/.django
            - ./env/.development/.postgres
        depends_on:
            - redis
            - postgres
            - mailhog
        networks:
            - codera

    flower:
        build:
            context: .
            dockerfile: ./docker/development/django/Dockerfile
        command: /start-flower
        volumes:
            - flower_data:/data
        env_file:
            - ./env/.development/.django
            - ./env/.development/.postgres
        ports:
            - "5555:5555"
        depends_on:
            - redis
            - postgres
        networks:
            - codera

    nginx:
        restart: always
        depends_on:
            - server
        volumes:
            - static_volume:/app/staticfiles
            - media_volume:/app/mediafiles
        build:
            context: ./docker/development/nginx
            dockerfile: Dockerfile
        ports:
            - "8080:8080"
        networks:
            - codera

networks:
    codera:
        driver: bridge

volumes:
    static_volume:
    media_volume:
    local_postgres_data: {}
    local_postgres_data_backups: {}
    flower_data: {}